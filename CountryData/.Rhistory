library(dplyr)
library(ggplot2)
# Filter the data to include only rows where ST is 131
filtered_data <- Germany %>%
filter(ST == 131)
# Calculate the count of 131 and total count for each year
yearly_data <- Germany %>%
group_by(Collection.Year) %>%
summarise(
count_131 = sum(ST == 131),
total_count = n()
)
# Calculate the fraction of 131 for each year
yearly_data <- yearly_data
mutate(fraction_131 = count_131 / total_count)
# Filter the data to include only rows where ST is 131
filtered_data <- Germany %>%
filter(ST == 131)
# Calculate the count of 131 and total count for each year
yearly_data <- Germany %>%
group_by(Collection.Year) %>%
summarise(
count_131 = sum(ST == 131),
total_count = n()
)
# Calculate the fraction of 131 for each year
yearly_data <- yearly_data
mutate(fraction_131 = count_131 / total_count)
# Filter the data to include only rows where ST is 131
filtered_data <- Germany %>%
filter(ST == 131)
# Calculate the count of 131 and total count for each year
yearly_data <- Germany %>%
group_by(Collection.Year) %>%
summarise(
count_131 = sum(ST == 131),
total_count = n()
)
# Calculate the fraction of 131 for each year
yearly_data <- yearly_data
mutate(fraction_131 = sum(ST == 131) / total_count)
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("/Users/tarnampreetkaur/Desktop/Research data")
getwd()
library(ggplot2)
Germany <- read.csv("Germany.csv")
head(Germany)
names(Germany)
table(Germany$Collection.Year)
table(Germany$ST)
table(Germany$Source.Niche)
source_niche_table <- table(Germany$Source.Niche)
source_niche_df <- as.data.frame(source_niche_table)
colnames(source_niche_df) <- c("Source.Niche", "Count")
ggplot(data = source_niche_df, aes(x = Source.Niche, y = Count, fill = Source.Niche)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Distribution of E. coli Strains by Source Niche in Germany") +
labs(x = "Source Niche", y = "Count") +
scale_fill_brewer(palette = "Set3")
#Col <- "red", "green", "blue", "pink", "magenta", "maroon", "navy","gold", "skyblue", "cyan", "purple",
source_type_table <- table(Germany$Source.Type)
source_type_df <- as.data.frame(source_type_table)
colnames(source_type_df) <- c("Source.Type", "Count")
ggplot(data = source_type_df, aes(x = Source.Type, y = Count, fill = Source.Type)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Distribution of E. coli Strains by Source Type in Germany") +
labs(x = "Source Type", y = "Count", col= c( "red", "green", "blue", "pink", "magenta", "maroon", "navy","gold", "skyblue", "cyan", "purple"))
# Load the necessary libraries
library(dplyr)
library(ggplot2)
filtered_data <- Germany %>%
filter(ST == 131)
yearly_count <- filtered_data %>%
group_by(Collection.Year) %>%
summarise(count = n())
ggplot(yearly_count, aes(x = Collection.Year, y = count)) +
geom_line(color = "black") +
geom_point(color = "deeppink") +
labs(title = "Count of '131' Over the Years in Germany",
x = "Year",
y = "131 count") +
theme_minimal()
# Filter the data to include only rows where ST is 131
filtered_data <- Germany %>%
filter(ST == 131)
# Calculate the count of 131 and total count for each year
yearly_data <- Germany %>%
group_by(Collection.Year) %>%
summarise(
count_131 = sum(ST == 131),
total_count = n()
)
# Calculate the fraction of 131 for each year
yearly_data <- yearly_data
mutate(fraction_131 = sum(ST == 131) / total_count)
# Filter the data to include only rows where ST is 131
filtered_data <- Germany %>%
filter(ST == 131)
# Calculate the count of 131 and total count for each year
yearly_data <- Germany %>%
group_by(Collection.Year) %>%
summarise(
count_131 = sum(ST == 131),
total_count = n()
)
# Calculate the fraction of 131 for each year
yearly_data <- yearly_data
mutate(fraction_131 = count_131 / total_count)
ST_Frequency <- table(Germany$ST)
print(ST_Frequency)
sorted_st_frequency <- sort(table(Germany$ST), decreasing = TRUE)
sorted_st_frequency
# Filter the data to include only rows where ST is 131
filtered_data <- Germany %>%
filter(ST == 131)
# Calculate the count of 131 and total count for each year
yearly_data <- Germany %>%
group_by(Collection.Year) %>%
summarise(
count_131 = sum(ST == 131),
total_count = n()
)
# Calculate the fraction of 131 for each year
yearly_data <- yearly_data
mutate(fraction_131 = count_131 / total_count)
# Load the necessary libraries
library(dplyr)
library(ggplot2)
# Replace 'year_column' with the actual name of your year column
year_column <- "your_year_column_name_here"
# Calculate the count of 131 and total count for each year
yearly_data <- Germany %>%
group_by(Germany[Collection.Year]) %>%
summarise(
count_131 = sum(ST == 131),
total_count = n()
)
year_column <- Collection.Year
year_column <- Collection.Year
year_column <- Collection.Year
# Plot the count of 131 by source type
ggplot(source_type_count, aes(x = Source.Type, y = count_131)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Count of '131' by Source Type",
x = "Source Type",
y = "Count of 131") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(source_type_count, aes(x = Source.Type, y = count_131)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Count of '131' by Source Type",
x = "Source Type",
y = "Count of 131") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(source_type_count, aes(x = Source.Type, y = count_131)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Count of '131' by Source Type",
x = "Source.Type",
y = "Count of 131") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
source_type_count <- filtered_data %>%
group_by(Source.Type) %>%
summarise(count_131 = n())
head(source_type_count)
ggplot(source_type_count, aes(x = Source.Type, y = count_131)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Count of '131' by Source Type",
x = "Source.Type",
y = "Count of 131") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the fraction of 131 by source type
ggplot(source_type_fraction, aes(x = Source.Type, y = fraction_131)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Fraction of '131' by Source Type",
x = "Source Type",
y = "Fraction of 131") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the fraction of 131 by source type
ggplot(source_type_fraction, aes(x = Source.Type, y = fraction_131)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Fraction of '131' by Source Type",
x = "Source Type",
y = "Fraction of 131") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the fraction of 131 by source type
ggplot(source_type_fraction, aes(x = Source.Type, y = fraction_131)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Fraction of '131' by Source Type",
x = "Source Type",
y = "Fraction of 131") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the fraction of 131 by source type
ggplot(source_type_fraction, aes(x = Source.Type, y = fraction_131)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Fraction of '131' by Source Type",
x = "Source Type",
y = "Fraction of 131") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the data
ggplot(yearly_pat_nonpat, aes(x = Collection.Year, y = count, fill = Pat.NonPat)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribution of Pat.NonPat for '131' Over the Years",
x = "Collection Year",
y = "Count",
fill = "Pat/NonPat") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the data
ggplot(yearly_pat_nonpat, aes(x = Collection.Year, y = count, fill = Path.Nonpath)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribution of Pat.NonPat for '131' Over the Years",
x = "Collection Year",
y = "Count",
fill = "Path.Nonpath") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the data
ggplot(yearly_pat_nonpat, aes(x = Collection.Year, y = count, fill = Path.Nonpath)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribution of Pat.NonPat for '131' Over the Years",
x = "Collection Year",
y = "Count",
fill = "Path.Nonpath") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the data
ggplot(Path, aes(x = Collection.Year, y = count, fill = Path.Nonpath)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribution of Pat.NonPat for '131' Over the Years",
x = "Collection Year",
y = "Count",
fill = "Path.Nonpath") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
---
title: "Final Code"
```{r}
# Load necessary libraries
library(ggplot2)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Step 1: Set the working directory to where your CSV files are stored
setwd("C:/Users/patron/Desktop/R Studio")
# Step 2: List all CSV files in the directory
file_list <- list.files(pattern = "\\.csv$")
# Step 3: Create an empty list to store data frames
data_list <- list()
# Step 4: Loop through each file and read the CSV
for (file in file_list) {
# Read the CSV file
data <- read.csv(file)
# Add a column to track the country based on the file name
country_name <- gsub(".csv", "", file)
data$Country <- country_name
# Store the data frame in the list
data_list[[file]] <- data
}
# Step 5: Combine all the data frames into one large data frame
combined_data <- do.call(rbind, data_list)
# Step 6: Filter for human data and the years 2010-2024
filtered_data <- combined_data %>%
filter(Source.Type == "Human", Collection.Year >= 2010, Collection.Year <= 2024)
# Step 7: Group and calculate the percentage of ST131 for each country per year
summary_data <- filtered_data %>%
group_by(Country, Collection.Year) %>%
summarise(
total_human = n(),
st131_count = sum(ST == "ST131"),
st131_percentage = (st131_count / total_human) * 100
)
# Step 7: Group and calculate the percentage of ST131 for each country per year
summary_data <- filtered_data %>%
group_by(Country, Collection.Year) %>%
summarise(
total_human = n(),
st131_count = sum(ST == "ST131"),
st131_percentage = (st131_count / total_human) * 100
)
# Step 8: Create a simple line graph for each country
ggplot(summary_data, aes(x = Collection.Year, y = st131_percentage, color = Country, group = Country)) +
geom_line(size = 1.2) +  # Line graph
labs(title = "ST131 Percentage in Human Sources (2010-2024)",
x = "Year",
y = "ST131 Percentage") +
theme_minimal()
# Step 9: Save the graph
ggsave("st131_countries_line_graph.png")
# Step 8: Create a simple line graph for each country
ggplot(summary_data, aes(x = Collection.Year, y = st131_percentage, color = Country, group = Country)) +
geom_line(size = 1.2) +  # Line graph
labs(title = "ST131 Percentage in Human Sources (2010-2024)",
x = "Year",
y = "ST131 Percentage") +
theme_minimal()
# Step 9: Save the graph
ggsave("st131_countries_line_graph.png")
library(dplyr)
# Step 1: Set the working directory to where your CSV files are stored
setwd("C:/Users/patron/Desktop/R Studio")
# Step 2: List all CSV files in the directory
file_list <- list.files(pattern = "\\.csv$")
# Step 3: Create an empty list to store data frames
data_list <- list()
# Step 4: Loop through each file and read the CSV
for (file in file_list) {
# Read the CSV file
data <- read.csv(file)
# Add a column to track the country based on the file name
country_name <- gsub(".csv", "", file)
data$Country <- country_name
# Store the data frame in the list
data_list[[file]] <- data
}
# Step 5: Combine all the data frames into one large data frame
combined_data <- do.call(rbind, data_list)
# Step 6: Filter for human data and the years 2010-2024
filtered_data <- combined_data %>%
filter(Source.Type == "Human", Collection.Year >= 2010, Collection.Year <= 2024)
# Step 7: Group and calculate the percentage of ST131 for each country per year
summary_data <- filtered_data %>%
group_by(Country, Collection.Year) %>%
summarise(
total_human = n(),
st131_count = sum(ST == "ST131"),
st131_percentage = (st131_count / total_human) * 100
)
# Step 8: Create a simple line graph for each country
ggplot(summary_data, aes(x = Collection.Year, y = st131_percentage, color = Country, group = Country)) +
geom_line(size = 1.2) +  # Line graph
labs(title = "ST131 Percentage in Human Sources (2010-2024)",
x = "Year",
y = "ST131 Percentage") +
theme_minimal()
# Step 9: Save the graph
ggsave("st131_countries_line_graph.png")
library(dplyr)
# Step 1: Set the working directory to where your CSV files are stored
setwd("C:/Users/patron/Desktop/R Studio")
# Step 2: List all CSV files in the directory
file_list <- list.files(pattern = "\\.csv$")
# Step 3: Create an empty list to store data frames
data_list <- list()
# Step 4: Loop through each file and read the CSV
for (file in file_list) {
# Read the CSV file
data <- read.csv(file)
# Add a column to track the country based on the file name
country_name <- gsub(".csv", "", file)
data$Country <- country_name
# Store the data frame in the list
data_list[[file]] <- data
}
# Step 5: Combine all the data frames into one large data frame
combined_data <- do.call(rbind, data_list)
# Step 6: Filter for human data and the years 2010-2024
filtered_data <- combined_data %>%
filter(Source.Type == "Human", Collection.Year >= 2010, Collection.Year <= 2024)
# Step 7: Group and calculate the percentage of ST131 for each country per year
summary_data <- filtered_data %>%
group_by(Country, Collection.Year) %>%
summarise(
total_human = n(),
st131_count = sum(ST == "ST131"),
st131_percentage = (st131_count / total_human) * 100
)
# Step 8: Create a simple line graph for each country
ggplot(summary_data, aes(x = Collection.Year, y = st131_percentage, color = Country, group = Country)) +
geom_line(size = 1.2) +  # Line graph
labs(title = "ST131 Percentage in Human Sources (2010-2024)",
x = "Year",
y = "ST131 Percentage") +
theme_minimal()
# Step 9: Save the graph
ggsave("st131_countries_line_graph.png")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Step 1: Set the working directory to where your CSV files are stored
setwd("C:/Users/patron/Desktop/R Studio")
# Step 2: List all CSV files in the directory
file_list <- list.files(pattern = "\\.csv$")
# Step 3: Create an empty list to store data frames
data_list <- list()
# Step 4: Loop through each file and read the CSV
for (file in file_list) {
# Read the CSV file
data <- read.csv(file)
# Add a column to track the country based on the file name
country_name <- gsub(".csv", "", file)
data$Country <- country_name
# Store the data frame in the list
data_list[[file]] <- data
}
# Step 5: Combine all the data frames into one large data frame
combined_data <- do.call(rbind, data_list)
# Step 6: Filter for human data and the years 2010-2024
filtered_data <- combined_data %>%
filter(Source.Type == "Human", Collection.Year >= 2010, Collection.Year <= 2024)
# Step 7: Group and calculate the percentage of ST131 for each country per year
summary_data <- filtered_data %>%
group_by(Country, Collection.Year) %>%
summarise(
total_human = n(),
st131_count = sum(ST == "ST131"),
st131_percentage = (st131_count / total_human) * 100
)
# Step 8: Create a simple line graph for each country
ggplot(summary_data, aes(x = Collection.Year, y = st131_percentage, color = Country, group = Country)) +
geom_line(size = 1.2) +  # Line graph
labs(title = "ST131 Percentage in Human Sources (2010-2024)",
x = "Year",
y = "ST131 Percentage") +
theme_minimal()
# Step 9: Save the graph
ggsave("st131_countries_line_graph.png")
setwd("/Users/tarnampreetkaur/Desktop/Research data/Fall 2024/GitHub/EcoliST131EuropeProject/CountryData")
getwd()
# List all CSV files in the directory
file_list <- list.files(pattern = "*.csv")
# Stop if no CSV files are found
if (length(file_list) == 0) {
stop("No CSV files found in the directory.")
}
# Create an empty list to store data frames
data_list <- list()
# Loop through each file in file_list, read it, and add a country column
for (file in file_list) {
data <- read.csv(file)
# Add diagnostic print statement
print(paste("Reading file:", file))
print(paste("Number of rows:", nrow(data)))
# Add a column to track the country (based on file name)
data$Country <- gsub(".csv","", file)
# Append to data_list
data_list[[file]] <- data
}
# Combine all data frames into one large data frame
combined_data <- do.call(rbind, data_list)
# Add debugging checks
print("Checking unique ST values:")
print(unique(combined_data$ST))
print("Data structure:")
str(combined_data)
print("Checking Source.Type values:")
print(unique(combined_data$Source.Type))
print("First few rows of combined data:")
print(head(combined_data))
# Load required libraries
library(dplyr)
library(ggplot2)
# Create summary data with debugging prints
summary_data <- combined_data %>%
filter(Source.Type == "Human",
Collection.Year >= 2010,
Collection.Year <= 2024) %>%
group_by(Country, Collection.Year) %>%
summarise(
total_human = n(),
st131_count = sum(ST == 131, na.rm = TRUE),
st131_percentage = (st131_count / total_human) * 100
) %>%
ungroup()
# Print detailed summary
print("Detailed summary of calculations:")
print(summary_data %>%
select(Country, Collection.Year, total_human, st131_count, st131_percentage))
# Create the plot
ggplot(summary_data, aes(x = Collection.Year, y = st131_percentage, color = Country, group = Country)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +  # Added points to better see the data
scale_y_continuous(
limits = c(0, max(summary_data$st131_percentage) * 1.1),  # Set reasonable y-axis limits
breaks = seq(0, 100, by = 10)  # Create breaks every 10%
) +
scale_x_continuous(breaks = seq(2010, 2024, by = 2)) +
labs(title = "ST131 Percentage in Human Sources (2010-2024)",
x = "Year",
y = "ST131 Percentage (%)",
color = "Country") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right",
panel.grid.minor = element_blank()
)+
facet_wrap(~Country, ncol=5)
# plotting graph ST131 ECOLI/ countries in bar.
ggplot(summary_data, aes(x = Collection.Year, y = st131_percentage, fill = Country)) +
geom_col(position = position_dodge(width = 0.7), linewidth = 1.5) +
scale_y_continuous(
limits = c(0, max(summary_data$st131_percentage) * 1.1),
breaks = seq(0, 100, by = 10)
) +
scale_x_continuous(breaks = seq(2010, 2024, by = 2)) +
labs(title = "ST131 Percentage in Human Sources (2010-2024)",
x = "Year",
y = "ST131 Percentage (%)",
fill = "Country") +
theme_minimal()
