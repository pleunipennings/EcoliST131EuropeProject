highlight_color <- "deeppink1"  # Color for the highlighted bar
normal_color <- "deepskyblue2"  # Color for other bars
# Create a column to specify the fill color based on the ST variable
top_st_italy$fill_color <- ifelse(top_st_italy$ST == "131", highlight_color, normal_color)
ggplot(top_st_italy, aes(x = reorder(ST, -Frequency), y = Frequency, fill = fill_color)) +
geom_bar(stat = "identity") +
xlab("Sequence Type (ST)") +
ylab("Frequency") +
ggtitle(paste("Top", top_thirty, "Italy Sequence Types (ST) by Frequency")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_identity()
filtered_data <- Italy_Data %>%
filter(ST == 131)
yearly_count <- filtered_data %>%
group_by(Collection.Year) %>%
summarise(count = n())
ggplot(yearly_count, aes(x = Collection.Year, y = count)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(title = "Cases of Strain 131 Over the Years in Italy",
x = "Year",
y = "131 Cases") +
theme_minimal() +
scale_x_continuous(breaks = yearly_count$Collection.Year) +
theme(
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
#organizing the data
yearly_count_by_source_type <- filtered_data %>%
group_by(Collection.Year, Source.Type) %>%
summarise(count = n())
#Plot the data
ggplot(yearly_count_by_source_type, aes(x = Collection.Year, y = count, color = Source.Type)) +
geom_line() +
geom_point() +
labs(title = "Amount of ST131 Over the Years in Italy by Source Type",
x = "Year",
y = "Amount of Cases",
color = "source_type") +
theme(
plot.title = element_text(size = 12, face = "bold", hjust = 0.2, margin = margin(b = 15)),
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.y = element_text(size = 12),
legend.title = element_text(size = 12, margin = margin(t = 10))
) +
scale_x_continuous(breaks = seq(min(yearly_count_by_source_type$Collection.Year),
max(yearly_count_by_source_type$Collection.Year),
by = 1))
#sorting the data
italy_st_data <- filtered_data %>%
group_by(Source.Type) %>%
summarise(frequency = n()) %>%
ungroup()
#graphing the data
ggplot(italy_st_data, aes(x = reorder(Source.Type, frequency), y = frequency, fill = Source.Type)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Frequency of ST131 by Source Type in Italy",
x = "Source",
y = "Frequency") +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.position = "none"
)
#calculation of all data
total_cases_Italy <- Italy_Data %>%
filter(Collection.Year >= 2010 & Collection.Year <= 2023) %>%
summarise(total_frequency = n())
#calculation of ST131 only
ST131_cases <- Italy_Data %>%
filter(Collection.Year >= 2010 & Collection.Year <= 2023) %>%
filter(ST == '131') %>%
summarise(st131_frequency = n())
#combined the data to calculate percentage
Italy_combined_data <- cross_join(total_cases_Italy, ST131_cases) %>%
mutate(percentage = (st131_frequency / total_frequency) * 100)
print(Italy_combined_data)
#Filtering Italy's Data
Italy_filtered_data <- Italy_Data %>%
filter(ST == 131)
Italy_yearly_count <- Italy_filtered_data %>%
group_by(Collection.Year) %>%
summarise(count = n()) %>%
mutate(country = "Italy")
#Filtering France's Data
French_filtered_data <- France_Data %>%
filter(ST == 131)
French_yearly_count <- French_filtered_data %>%
filter(Collection.Year >= 2009 & Collection.Year <= 2023) %>%
group_by(Collection.Year) %>%
summarise(count = n()) %>%
mutate(country = "France")
#Combine the datasets
both_countries <- bind_rows(Italy_yearly_count, French_yearly_count)
#Create the plot
ggplot(both_countries, aes(x = Collection.Year, y = count, color = country, shape = country)) +
geom_line() +
geom_point() +
labs(title = "Cases of Strain 131 from 2009 to 2023 in Italy and France",
x = "Year",
y = "Amount of 131 Cases") +
scale_color_manual(values = c("Italy" = "coral1", "France" = "darkorchid3")) +
scale_shape_manual(values = c("Italy" = 19, "France" = 17)) +
theme_minimal() +
scale_x_continuous(breaks = both_countries$Collection.Year) +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.y = element_text(size = 12)
)
# Filtering and summarizing Italy's data
Italy_filtered_data <- Italy_Data %>%
filter(ST == 131, Collection.Year >= 2009 & Collection.Year <= 2023)
Italy_yearly_count <- Italy_filtered_data %>%
group_by(Collection.Year) %>%
summarise(count = n()) %>%
mutate(country = "Italy")
# Filtering and summarizing France's data
French_filtered_data <- France_Data %>%
filter(ST == 131, Collection.Year >= 2009 & Collection.Year <= 2023)
French_yearly_count <- French_filtered_data %>%
group_by(Collection.Year) %>%
summarise(count = n()) %>%
mutate(country = "France")
# Combine the datasets
both_countries <- bind_rows(Italy_yearly_count, French_yearly_count)
# Create a bar plot
ggplot(both_countries, aes(x = as.factor(Collection.Year), y = count, fill = country)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Frequency of Strain 131 from 2009 to 2023 in Italy and France",
x = "Year",
y = "131 Cases",
fill = "Country") +
scale_fill_manual(values = c("Italy" = "coral1", "France" = "darkorchid3")) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.y = element_text(size = 12),
legend.position = "top"
)
library(ggplot2)
library(ggrepel)
library(Polychrome)
library(here)
library(tidyverse)
getwd()
library(readr)
ECDCResistance <- read_csv("ECDC_surveillance_data_Antimicrobial_resistance_complete_DownloadApril2024.csv")
head(ECDCResistance)
# Filter for Resistance percentage info
ECDCResistance <- ECDCResistance[ECDCResistance$Indicator == "R - resistant isolates, percentage",] # Corrected the string to exactly match
ECDCResistance
# Convert NumValue to numeric
ECDCResistance$NumValue <- as.numeric(as.character(ECDCResistance$NumValue))
ECDCResistance
# Define the vector of countries of interest
countries_of_interest <- c("United Kingdom", "Belgium", "Germany", "Netherlands",
"Denmark", "Italy", "France", "Spain", "Portugal")
# Filter the dataset for these countries
ECDCResistance <- ECDCResistance[ECDCResistance$RegionName %in% countries_of_interest,]
# Convert RegionName to factor
ECDCResistance$RegionName <- as.factor(ECDCResistance$RegionName)
ECDCResistance
# Create columns for Bacterium and Drug
ECDCResistance$Bacterium <- sapply(str_split(ECDCResistance$Population, '\\|'), `[`, 1)
ECDCResistance$Drug <- sapply(str_split(ECDCResistance$Population, '\\|'), `[`, 2)
ECDCResistance
#Keep only E. coli
ECDCResistance <- ECDCResistance[ECDCResistance$Bacterium == "Escherichia coli",]
ECDCResistance
# Filter the dataset for years between 2010 and 2023
ECDCResistance<- ECDCResistance[ECDCResistance$Time >= 2010 & ECDCResistance$Time <= 2023,]
ECDCResistance
# Filter for E. coli and Fluoroquinolones
ECDCResistance <- ECDCResistance[ECDCResistance$Bacterium == "Escherichia coli" & ECDCResistance$Drug == "Fluoroquinolones",]
ECDCResistance
ggplot(data = ECDCResistance, mapping = aes(x = Time, y = NumValue))+
geom_line(aes(color = RegionName))+
theme(legend.position = "bottom")+
scale_y_continuous(limits = c(0,100))
# Assuming your dataframe is named ST131VSQuinolone
st131quinolone <- read.csv("ST131VSQuinolone - Sheet1.csv")
ggplot(data = st131quinolone, aes(x = QuinoloneUse.2015, y = ST131_percent, color = Country)) +
geom_point(size = 3) +  # Set the point size to 10
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Quinolone Use vs Percent of ST131 by Country",
x = "Quinolone Use 2015",
y = "ST 131 Percent") +
theme_minimal() +
theme(legend.position = "bottom")  # Adjust the position of the legend to the bottom
#Convert the data into a csv file
Name_TXT <- read.delim("filename.txt", header = TRUE, sep = "\t")
#Convert the data into a csv file
'Name_TXT <- read.delim("filename.txt", header = TRUE, sep = "\t")
write.csv(Name_TXT, "Name.csv", row.names = FALSE)
#Opening the csv file and assigning it a title
Name_Data <- read.csv("Name.csv", stringsAsFactors = TRUE)
#Convert the data into a csv file
'Name_TXT <- read.delim("filename.txt", header = TRUE, sep = "\t")
write.csv(Name_TXT, "Name.csv", row.names = FALSE)
#Opening the csv file and assigning it a title
Name_Data <- read.csv("Name.csv", stringsAsFactors = TRUE)'
View(both_countries)
View(covidcounties)
setwd("/Users/tarnampreetkaur/Desktop/Research data/Fall 2024/GitHub/EcoliST131EuropeProject/CountryData")
getwd()
setwd("C:/Users/patron/Desktop/R Studio")
setwd("/Users/tarnampreetkaur/Desktop/Research data/Fall2024/GitHub/EcoliST131EuropeProject/CountryData")
getwd()
```{r}
# List all CSV files in the directory
file_list <- list.files(pattern = "*.csv")
# Create an empty list to store data frames
data_list <- list()
# Loop through each file and read the CSV
for (file in file_list) {
# Read the CSV file
data <- read.csv(file)
# Optionally, add a column to track the country (based on file name)
data$Country <- gsub(".csv", "", file)
# Store the data frame in the list
data_list[[file]] <- data
}
# Combine all data frames into one large data frame
combined_data <- do.call(rbind, data_list)
# View the combined data
head(combined_data)
# View the combined data
head(combined_data)
```{r}
# List all CSV files in the directory
file_list <- list.files(pattern = "*.csv")
# Create an empty list to store data frames
data_list <- list()
# Create a list to store the count of human entries per country
human_counts <- list()
# Loop through each file and read the CSV
for (file in file_list) {
# Read the CSV file
data <- read.csv(file)
# Add a column to track the country (based on file name)
country_name <- gsub(".csv", "", file)
data$Country <- country_name
# Count the number of "Human" entries in the "Source Type" column
human_count <- data %>%
filter(Source.Type == "Human") %>%
nrow()
# Store the human count in the list
human_counts[[country_name]] <- human_count
# Store the data frame in the list for future use if needed
data_list[[file]] <- data
}
# Print the total number of human entries for each country
print(human_counts)
# Print the total number of human entries for each country
print(human_counts)
```{r}
# Function to filter data for years 2010 to 2024
filter_years <- function(data) {
filtered_data <- data %>%
filter(Collection.Year >= 2010 & Collection.Year <= 2024)
return(filtered_data)
}
# Function to filter data for years 2010 to 2024
filter_years <- function(data) {
filtered_data <- data %>%
filter(Collection.Year >= 2010 & Collection.Year <= 2024)
return(filtered_data)
}
```{r}
# Function to calculate the percentage of ST131 in human sources
calculate_st131_percentage_human <- function(data) {
# Filter for human sources only
human_data <- data %>%
filter(Source.Type == "Human")
# Count the total number of human records
total_human_count <- nrow(human_data)
# Count the number of ST131 entries in human sources
st131_human_count <- human_data %>%
filter(ST == "ST131") %>%
nrow()
# Calculate the percentage of ST131 in human sources
if (total_human_count == 0) {
return(0)  # Return 0% if no human data is found
}
percentage_st131_human <- (st131_human_count / total_human_count) * 100
return(percentage_st131_human)
}
# Filter for human sources only
human_data <- data %>%
filter(Source.Type == "Human")
# Count the total number of human records
total_human_count <- nrow(human_data)
# Count the number of ST131 entries in human sources
st131_human_count <- human_data %>%
filter(ST == "ST131") %>%
nrow()
# Calculate the percentage of ST131 in human sources
if (total_human_count == 0) {
return(0)  # Return 0% if no human data is found
}
percentage_st131_human <- (st131_human_count / total_human_count) * 100
return(percentage_st131_human)
# Function to calculate the percentage of ST131 in human sources
calculate_st131_percentage_human <- function(data) {
# Filter for human sources only
human_data <- data %>%
filter(Source.Type == "Human")
# Count the total number of human records
total_human_count <- nrow(human_data)
# Count the number of ST131 entries in human sources
st131_human_count <- human_data %>%
filter(ST == "ST131") %>%
nrow()
# Calculate the percentage of ST131 in human sources
if (total_human_count == 0) {
return(0)  # Return 0% if no human data is found
}
percentage_st131_human <- (st131_human_count / total_human_count) * 100
return(percentage_st131_human)
}
# Load necessary libraries
library(ggplot2)
# Create the line plot using ggplot
ggplot(summary_data, aes(x = Collection.Year, y = st131_percentage, color = Country, group = Country)) +
geom_line(size = 1.2) +
labs(title = "ST131 Percentage in Human Sources (2010-2024)",
x = "Year",
y = "ST131 Percentage",
color = "Country") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)
getwd()
```{r}
# List all CSV files in the directory
file_list <- list.files(pattern = "*.csv")
# Create an empty list to store data frames
data_list <- list()
# Loop through each file and read the CSV
for (file in file_list) {
# Read the CSV file
data <- read.csv(file)
# Optionally, add a column to track the country (based on file name)
data$Country <- gsub(".csv", "", file)
# Store the data frame in the list
data_list[[file]] <- data
}
# Combine all data frames into one large data frame
combined_data <- do.call(rbind, data_list)
# View the combined data
head(combined_data)
# View the combined data
head(combined_data)
```{r}
# List all CSV files in the directory
file_list <- list.files(pattern = "*.csv")
# Create an empty list to store data frames
data_list <- list()
# Create a list to store the count of human entries per country
human_counts <- list()
# Loop through each file and read the CSV
for (file in file_list) {
# Read the CSV file
data <- read.csv(file)
# Add a column to track the country (based on file name)
country_name <- gsub(".csv", "", file)
data$Country <- country_name
# Count the number of "Human" entries in the "Source Type" column
human_count <- data %>%
filter(Source.Type == "Human") %>%
nrow()
# Store the human count in the list
human_counts[[country_name]] <- human_count
# Store the data frame in the list for future use if needed
data_list[[file]] <- data
}
# Print the total number of human entries for each country
print(human_counts)
# Print the total number of human entries for each country
print(human_counts)
```{r}
# Function to filter data for years 2010 to 2024
filter_years <- function(data) {
filtered_data <- data %>%
filter(Collection.Year >= 2010 & Collection.Year <= 2024)
return(filtered_data)
}
# Function to filter data for years 2010 to 2024
filter_years <- function(data) {
filtered_data <- data %>%
filter(Collection.Year >= 2010 & Collection.Year <= 2024)
return(filtered_data)
}
```{r}
# Function to calculate the percentage of ST131 in human sources
calculate_st131_percentage_human <- function(data) {
# Filter for human sources only
human_data <- data %>%
filter(Source.Type == "Human")
# Count the total number of human records
total_human_count <- nrow(human_data)
# Count the number of ST131 entries in human sources
st131_human_count <- human_data %>%
filter(ST == "ST131") %>%
nrow()
# Calculate the percentage of ST131 in human sources
if (total_human_count == 0) {
return(0)  # Return 0% if no human data is found
}
percentage_st131_human <- (st131_human_count / total_human_count) * 100
return(percentage_st131_human)
}
# Load necessary libraries
library(ggplot2)
# Create a summarized dataset for plotting
summary_data <- combined_filtered_data %>%
filter(Source.Type == "Human", Collection.Year >= 2010, Collection.Year <= 2024) %>%
group_by(Country, Collection.Year) %>%
summarise(
total_human = n(),
st131_count = sum(ST == "ST131"),
st131_percentage = (st131_count / total_human) * 100
)
# Create the line plot using ggplot
ggplot(summary_data, aes(x = Collection.Year, y = st131_percentage, color = Country, group = Country)) +
geom_line(size = 1.2) +
labs(title = "ST131 Percentage in Human Sources (2010-2024)",
x = "Year",
y = "ST131 Percentage",
color = "Country") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)
# Check to make sure working directory is correct
getwd()
# List all the files in the directory
file_list <- list.files(pattern = "\\.csv$")
# Making sure the files are found
print(file_list)
# Create an emopty list to store the data frames
data_list <- list()
# Loop through each file in file_list, read it, and add a country column
for (file in file_list) {
# Skip the file if it's empty
if (file.size(file) == 0) {
message("Skipping empty file: ", file)
next
}
# Attempt to read the file; skip if there’s an error
data <- tryCatch({
read.csv(file)
}, error = function(e) {
message("Error reading file: ", file, " - ", e$message)
return(NULL)  # Skip this file
})
# If data was successfully read, add the Country column and store in data_list
if (!is.null(data)) {
data$Country <- gsub(".csv", "", file)
data_list[[file]] <- data
}
}
# Combine all non-empty data frames into one large data frame
combined_data <- do.call(rbind, data_list)
# Check the first few rows and count data per country
head(combined_data)
table(combined_data$Country)
# Verify if ST131 entries exist in the filtered data
st131_check <- combined_data$ST
head(st131_check)
# Load libary
library(dplyr)
# Isolate data to collums/topics needed
ST131_filtered_data <- combined_data %>%
# Filter to ST!31 and collection year
filter(Source.Type == 131) %>%
# Group Country and Collection.Year
group_by(Country, Collection.Year) %>%
# Summarize the data
summarise(
total_human = n(),
st131_count = sum(ST == "ST131", na.rm = TRUE),  # Counts "ST131" cases
st131_percentage = ifelse(total_human > 0, (st131_count / total_human) * 100, 0)
)
table(ST131_filtered_data)
getwd()
# List all csv files of the countries
file_list <- list.files(pattern = "*.csv")
print(file_list)
# Set working directory
setwd("/Users/codelab/Desktop/GitHub/EcoliST131EuropeProject/CountryData")
getwd()
# List all csv files of the countries
file_list <- list.files(pattern = "*.csv")
print(file_list)
print(file_list)
print("file_list")
# List all csv files of the countries
file_list <- list.files(pattern = "*.csv")
print(file_list)
